# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'DeviceError' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceError = Ice.createTempClass()
    class DeviceError(Ice.UserException):
        def __init__(self, errorMessage=''):
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceError'

    _M_SmartHome._t_DeviceError = IcePy.defineException('::SmartHome::DeviceError', DeviceError, (), False, None, (('errorMessage', (), IcePy._t_string, False, 0),))
    DeviceError._ice_type = _M_SmartHome._t_DeviceError

    _M_SmartHome.DeviceError = DeviceError
    del DeviceError

if 'DeviceNotFound' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceNotFound = Ice.createTempClass()
    class DeviceNotFound(Ice.UserException):
        def __init__(self, errorMessage='', deviceId=''):
            self.errorMessage = errorMessage
            self.deviceId = deviceId

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceNotFound'

    _M_SmartHome._t_DeviceNotFound = IcePy.defineException('::SmartHome::DeviceNotFound', DeviceNotFound, (), False, None, (
        ('errorMessage', (), IcePy._t_string, False, 0),
        ('deviceId', (), IcePy._t_string, False, 0)
    ))
    DeviceNotFound._ice_type = _M_SmartHome._t_DeviceNotFound

    _M_SmartHome.DeviceNotFound = DeviceNotFound
    del DeviceNotFound

if 'InvalidParameter' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidParameter = Ice.createTempClass()
    class InvalidParameter(Ice.UserException):
        def __init__(self, parameter='', reason=''):
            self.parameter = parameter
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidParameter'

    _M_SmartHome._t_InvalidParameter = IcePy.defineException('::SmartHome::InvalidParameter', InvalidParameter, (), False, None, (
        ('parameter', (), IcePy._t_string, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    InvalidParameter._ice_type = _M_SmartHome._t_InvalidParameter

    _M_SmartHome.InvalidParameter = InvalidParameter
    del InvalidParameter

if 'DeviceState' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceState = Ice.createTempClass()
    class DeviceState(object):
        def __init__(self, isOn=False, statusMessage=''):
            self.isOn = isOn
            self.statusMessage = statusMessage

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.isOn)
            _h = 5 * _h + Ice.getHash(self.statusMessage)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.DeviceState):
                return NotImplemented
            else:
                if self.isOn is None or other.isOn is None:
                    if self.isOn != other.isOn:
                        return (-1 if self.isOn is None else 1)
                else:
                    if self.isOn < other.isOn:
                        return -1
                    elif self.isOn > other.isOn:
                        return 1
                if self.statusMessage is None or other.statusMessage is None:
                    if self.statusMessage != other.statusMessage:
                        return (-1 if self.statusMessage is None else 1)
                else:
                    if self.statusMessage < other.statusMessage:
                        return -1
                    elif self.statusMessage > other.statusMessage:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceState)

        __repr__ = __str__

    _M_SmartHome._t_DeviceState = IcePy.defineStruct('::SmartHome::DeviceState', DeviceState, (), (
        ('isOn', (), IcePy._t_bool),
        ('statusMessage', (), IcePy._t_string)
    ))

    _M_SmartHome.DeviceState = DeviceState
    del DeviceState

if '_t_photoSeq' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_photoSeq = IcePy.defineSequence('::SmartHome::photoSeq', (), IcePy._t_byte)

if '_t_stringSeq' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_stringSeq = IcePy.defineSequence('::SmartHome::stringSeq', (), IcePy._t_string)

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.Device._op_turnOff.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Device._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Device._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Device._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceError,))
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceError,))
    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_DeviceState, False, 0), (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.Device = Device
    del Device

_M_SmartHome._t_MonitoringCamera = IcePy.defineValue('::SmartHome::MonitoringCamera', Ice.Value, -1, (), False, True, None, ())

if 'MonitoringCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.MonitoringCameraPrx = Ice.createTempClass()
    class MonitoringCameraPrx(_M_SmartHome.DevicePrx):

        def getSnapshot(self, context=None):
            return _M_SmartHome.MonitoringCamera._op_getSnapshot.invoke(self, ((), context))

        def getSnapshotAsync(self, context=None):
            return _M_SmartHome.MonitoringCamera._op_getSnapshot.invokeAsync(self, ((), context))

        def begin_getSnapshot(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.MonitoringCamera._op_getSnapshot.begin(self, ((), _response, _ex, _sent, context))

        def end_getSnapshot(self, _r):
            return _M_SmartHome.MonitoringCamera._op_getSnapshot.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.MonitoringCameraPrx.ice_checkedCast(proxy, '::SmartHome::MonitoringCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.MonitoringCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MonitoringCamera'
    _M_SmartHome._t_MonitoringCameraPrx = IcePy.defineProxy('::SmartHome::MonitoringCamera', MonitoringCameraPrx)

    _M_SmartHome.MonitoringCameraPrx = MonitoringCameraPrx
    del MonitoringCameraPrx

    _M_SmartHome.MonitoringCamera = Ice.createTempClass()
    class MonitoringCamera(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::MonitoringCamera')

        def ice_id(self, current=None):
            return '::SmartHome::MonitoringCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::MonitoringCamera'

        def getSnapshot(self, current=None):
            raise NotImplementedError("servant method 'getSnapshot' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_MonitoringCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_MonitoringCameraDisp = IcePy.defineClass('::SmartHome::MonitoringCamera', MonitoringCamera, (), None, (_M_SmartHome._t_DeviceDisp,))
    MonitoringCamera._ice_type = _M_SmartHome._t_MonitoringCameraDisp

    MonitoringCamera._op_getSnapshot = IcePy.Operation('getSnapshot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_photoSeq, False, 0), (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.MonitoringCamera = MonitoringCamera
    del MonitoringCamera

_M_SmartHome._t_PTZCamera = IcePy.defineValue('::SmartHome::PTZCamera', Ice.Value, -1, (), False, True, None, ())

if 'PTZCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.PTZCameraPrx = Ice.createTempClass()
    class PTZCameraPrx(_M_SmartHome.MonitoringCameraPrx):

        def pan(self, degrees, context=None):
            return _M_SmartHome.PTZCamera._op_pan.invoke(self, ((degrees, ), context))

        def panAsync(self, degrees, context=None):
            return _M_SmartHome.PTZCamera._op_pan.invokeAsync(self, ((degrees, ), context))

        def begin_pan(self, degrees, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_pan.begin(self, ((degrees, ), _response, _ex, _sent, context))

        def end_pan(self, _r):
            return _M_SmartHome.PTZCamera._op_pan.end(self, _r)

        def tilt(self, degrees, context=None):
            return _M_SmartHome.PTZCamera._op_tilt.invoke(self, ((degrees, ), context))

        def tiltAsync(self, degrees, context=None):
            return _M_SmartHome.PTZCamera._op_tilt.invokeAsync(self, ((degrees, ), context))

        def begin_tilt(self, degrees, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_tilt.begin(self, ((degrees, ), _response, _ex, _sent, context))

        def end_tilt(self, _r):
            return _M_SmartHome.PTZCamera._op_tilt.end(self, _r)

        def zoom(self, factor, context=None):
            return _M_SmartHome.PTZCamera._op_zoom.invoke(self, ((factor, ), context))

        def zoomAsync(self, factor, context=None):
            return _M_SmartHome.PTZCamera._op_zoom.invokeAsync(self, ((factor, ), context))

        def begin_zoom(self, factor, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_zoom.begin(self, ((factor, ), _response, _ex, _sent, context))

        def end_zoom(self, _r):
            return _M_SmartHome.PTZCamera._op_zoom.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.PTZCameraPrx.ice_checkedCast(proxy, '::SmartHome::PTZCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.PTZCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PTZCamera'
    _M_SmartHome._t_PTZCameraPrx = IcePy.defineProxy('::SmartHome::PTZCamera', PTZCameraPrx)

    _M_SmartHome.PTZCameraPrx = PTZCameraPrx
    del PTZCameraPrx

    _M_SmartHome.PTZCamera = Ice.createTempClass()
    class PTZCamera(_M_SmartHome.MonitoringCamera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::MonitoringCamera', '::SmartHome::PTZCamera')

        def ice_id(self, current=None):
            return '::SmartHome::PTZCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PTZCamera'

        def pan(self, degrees, current=None):
            raise NotImplementedError("servant method 'pan' not implemented")

        def tilt(self, degrees, current=None):
            raise NotImplementedError("servant method 'tilt' not implemented")

        def zoom(self, factor, current=None):
            raise NotImplementedError("servant method 'zoom' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PTZCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_PTZCameraDisp = IcePy.defineClass('::SmartHome::PTZCamera', PTZCamera, (), None, (_M_SmartHome._t_MonitoringCameraDisp,))
    PTZCamera._ice_type = _M_SmartHome._t_PTZCameraDisp

    PTZCamera._op_pan = IcePy.Operation('pan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    PTZCamera._op_tilt = IcePy.Operation('tilt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    PTZCamera._op_zoom = IcePy.Operation('zoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))

    _M_SmartHome.PTZCamera = PTZCamera
    del PTZCamera

_M_SmartHome._t_NightVisionCamera = IcePy.defineValue('::SmartHome::NightVisionCamera', Ice.Value, -1, (), False, True, None, ())

if 'NightVisionCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.NightVisionCameraPrx = Ice.createTempClass()
    class NightVisionCameraPrx(_M_SmartHome.MonitoringCameraPrx):

        def changeIRMode(self, context=None):
            return _M_SmartHome.NightVisionCamera._op_changeIRMode.invoke(self, ((), context))

        def changeIRModeAsync(self, context=None):
            return _M_SmartHome.NightVisionCamera._op_changeIRMode.invokeAsync(self, ((), context))

        def begin_changeIRMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.NightVisionCamera._op_changeIRMode.begin(self, ((), _response, _ex, _sent, context))

        def end_changeIRMode(self, _r):
            return _M_SmartHome.NightVisionCamera._op_changeIRMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.NightVisionCameraPrx.ice_checkedCast(proxy, '::SmartHome::NightVisionCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.NightVisionCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::NightVisionCamera'
    _M_SmartHome._t_NightVisionCameraPrx = IcePy.defineProxy('::SmartHome::NightVisionCamera', NightVisionCameraPrx)

    _M_SmartHome.NightVisionCameraPrx = NightVisionCameraPrx
    del NightVisionCameraPrx

    _M_SmartHome.NightVisionCamera = Ice.createTempClass()
    class NightVisionCamera(_M_SmartHome.MonitoringCamera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::MonitoringCamera', '::SmartHome::NightVisionCamera')

        def ice_id(self, current=None):
            return '::SmartHome::NightVisionCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::NightVisionCamera'

        def changeIRMode(self, current=None):
            raise NotImplementedError("servant method 'changeIRMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_NightVisionCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_NightVisionCameraDisp = IcePy.defineClass('::SmartHome::NightVisionCamera', NightVisionCamera, (), None, (_M_SmartHome._t_MonitoringCameraDisp,))
    NightVisionCamera._ice_type = _M_SmartHome._t_NightVisionCameraDisp

    NightVisionCamera._op_changeIRMode = IcePy.Operation('changeIRMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.NightVisionCamera = NightVisionCamera
    del NightVisionCamera

_M_SmartHome._t_WideAngleCamera = IcePy.defineValue('::SmartHome::WideAngleCamera', Ice.Value, -1, (), False, True, None, ())

if 'WideAngleCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.WideAngleCameraPrx = Ice.createTempClass()
    class WideAngleCameraPrx(_M_SmartHome.MonitoringCameraPrx):

        def setFieldOfView(self, degrees, context=None):
            return _M_SmartHome.WideAngleCamera._op_setFieldOfView.invoke(self, ((degrees, ), context))

        def setFieldOfViewAsync(self, degrees, context=None):
            return _M_SmartHome.WideAngleCamera._op_setFieldOfView.invokeAsync(self, ((degrees, ), context))

        def begin_setFieldOfView(self, degrees, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.WideAngleCamera._op_setFieldOfView.begin(self, ((degrees, ), _response, _ex, _sent, context))

        def end_setFieldOfView(self, _r):
            return _M_SmartHome.WideAngleCamera._op_setFieldOfView.end(self, _r)

        def getFieldOfView(self, context=None):
            return _M_SmartHome.WideAngleCamera._op_getFieldOfView.invoke(self, ((), context))

        def getFieldOfViewAsync(self, context=None):
            return _M_SmartHome.WideAngleCamera._op_getFieldOfView.invokeAsync(self, ((), context))

        def begin_getFieldOfView(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.WideAngleCamera._op_getFieldOfView.begin(self, ((), _response, _ex, _sent, context))

        def end_getFieldOfView(self, _r):
            return _M_SmartHome.WideAngleCamera._op_getFieldOfView.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.WideAngleCameraPrx.ice_checkedCast(proxy, '::SmartHome::WideAngleCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.WideAngleCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::WideAngleCamera'
    _M_SmartHome._t_WideAngleCameraPrx = IcePy.defineProxy('::SmartHome::WideAngleCamera', WideAngleCameraPrx)

    _M_SmartHome.WideAngleCameraPrx = WideAngleCameraPrx
    del WideAngleCameraPrx

    _M_SmartHome.WideAngleCamera = Ice.createTempClass()
    class WideAngleCamera(_M_SmartHome.MonitoringCamera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::MonitoringCamera', '::SmartHome::WideAngleCamera')

        def ice_id(self, current=None):
            return '::SmartHome::WideAngleCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::WideAngleCamera'

        def setFieldOfView(self, degrees, current=None):
            raise NotImplementedError("servant method 'setFieldOfView' not implemented")

        def getFieldOfView(self, current=None):
            raise NotImplementedError("servant method 'getFieldOfView' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_WideAngleCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_WideAngleCameraDisp = IcePy.defineClass('::SmartHome::WideAngleCamera', WideAngleCamera, (), None, (_M_SmartHome._t_MonitoringCameraDisp,))
    WideAngleCamera._ice_type = _M_SmartHome._t_WideAngleCameraDisp

    WideAngleCamera._op_setFieldOfView = IcePy.Operation('setFieldOfView', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    WideAngleCamera._op_getFieldOfView = IcePy.Operation('getFieldOfView', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.WideAngleCamera = WideAngleCamera
    del WideAngleCamera

_M_SmartHome._t_Thermostat = IcePy.defineValue('::SmartHome::Thermostat', Ice.Value, -1, (), False, True, None, ())

if 'ThermostatPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThermostatPrx = Ice.createTempClass()
    class ThermostatPrx(_M_SmartHome.DevicePrx):

        def setTemperature(self, temperature, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_setTemperature.end(self, _r)

        def getTemperature(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Thermostat._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Thermostat._op_getTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ThermostatPrx.ice_checkedCast(proxy, '::SmartHome::Thermostat', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ThermostatPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'
    _M_SmartHome._t_ThermostatPrx = IcePy.defineProxy('::SmartHome::Thermostat', ThermostatPrx)

    _M_SmartHome.ThermostatPrx = ThermostatPrx
    del ThermostatPrx

    _M_SmartHome.Thermostat = Ice.createTempClass()
    class Thermostat(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Thermostat')

        def ice_id(self, current=None):
            return '::SmartHome::Thermostat'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Thermostat'

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ThermostatDisp)

        __repr__ = __str__

    _M_SmartHome._t_ThermostatDisp = IcePy.defineClass('::SmartHome::Thermostat', Thermostat, (), None, (_M_SmartHome._t_DeviceDisp,))
    Thermostat._ice_type = _M_SmartHome._t_ThermostatDisp

    Thermostat._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    Thermostat._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.Thermostat = Thermostat
    del Thermostat

_M_SmartHome._t_SmartPlug = IcePy.defineValue('::SmartHome::SmartPlug', Ice.Value, -1, (), False, True, None, ())

if 'SmartPlugPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartPlugPrx = Ice.createTempClass()
    class SmartPlugPrx(_M_SmartHome.DevicePrx):

        def getPowerConsumption(self, context=None):
            return _M_SmartHome.SmartPlug._op_getPowerConsumption.invoke(self, ((), context))

        def getPowerConsumptionAsync(self, context=None):
            return _M_SmartHome.SmartPlug._op_getPowerConsumption.invokeAsync(self, ((), context))

        def begin_getPowerConsumption(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartPlug._op_getPowerConsumption.begin(self, ((), _response, _ex, _sent, context))

        def end_getPowerConsumption(self, _r):
            return _M_SmartHome.SmartPlug._op_getPowerConsumption.end(self, _r)

        def resetPowerConsumption(self, context=None):
            return _M_SmartHome.SmartPlug._op_resetPowerConsumption.invoke(self, ((), context))

        def resetPowerConsumptionAsync(self, context=None):
            return _M_SmartHome.SmartPlug._op_resetPowerConsumption.invokeAsync(self, ((), context))

        def begin_resetPowerConsumption(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartPlug._op_resetPowerConsumption.begin(self, ((), _response, _ex, _sent, context))

        def end_resetPowerConsumption(self, _r):
            return _M_SmartHome.SmartPlug._op_resetPowerConsumption.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartPlugPrx.ice_checkedCast(proxy, '::SmartHome::SmartPlug', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartPlugPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartPlug'
    _M_SmartHome._t_SmartPlugPrx = IcePy.defineProxy('::SmartHome::SmartPlug', SmartPlugPrx)

    _M_SmartHome.SmartPlugPrx = SmartPlugPrx
    del SmartPlugPrx

    _M_SmartHome.SmartPlug = Ice.createTempClass()
    class SmartPlug(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::SmartPlug')

        def ice_id(self, current=None):
            return '::SmartHome::SmartPlug'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartPlug'

        def getPowerConsumption(self, current=None):
            raise NotImplementedError("servant method 'getPowerConsumption' not implemented")

        def resetPowerConsumption(self, current=None):
            raise NotImplementedError("servant method 'resetPowerConsumption' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartPlugDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartPlugDisp = IcePy.defineClass('::SmartHome::SmartPlug', SmartPlug, (), None, (_M_SmartHome._t_DeviceDisp,))
    SmartPlug._ice_type = _M_SmartHome._t_SmartPlugDisp

    SmartPlug._op_getPowerConsumption = IcePy.Operation('getPowerConsumption', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_DeviceError,))
    SmartPlug._op_resetPowerConsumption = IcePy.Operation('resetPowerConsumption', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.SmartPlug = SmartPlug
    del SmartPlug

_M_SmartHome._t_PowerStripPlug = IcePy.defineValue('::SmartHome::PowerStripPlug', Ice.Value, -1, (), False, True, None, ())

if 'PowerStripPlugPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.PowerStripPlugPrx = Ice.createTempClass()
    class PowerStripPlugPrx(_M_SmartHome.SmartPlugPrx):

        def getOutletConsumption(self, index, context=None):
            return _M_SmartHome.PowerStripPlug._op_getOutletConsumption.invoke(self, ((index, ), context))

        def getOutletConsumptionAsync(self, index, context=None):
            return _M_SmartHome.PowerStripPlug._op_getOutletConsumption.invokeAsync(self, ((index, ), context))

        def begin_getOutletConsumption(self, index, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PowerStripPlug._op_getOutletConsumption.begin(self, ((index, ), _response, _ex, _sent, context))

        def end_getOutletConsumption(self, _r):
            return _M_SmartHome.PowerStripPlug._op_getOutletConsumption.end(self, _r)

        def resetOutletConsumption(self, index, context=None):
            return _M_SmartHome.PowerStripPlug._op_resetOutletConsumption.invoke(self, ((index, ), context))

        def resetOutletConsumptionAsync(self, index, context=None):
            return _M_SmartHome.PowerStripPlug._op_resetOutletConsumption.invokeAsync(self, ((index, ), context))

        def begin_resetOutletConsumption(self, index, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PowerStripPlug._op_resetOutletConsumption.begin(self, ((index, ), _response, _ex, _sent, context))

        def end_resetOutletConsumption(self, _r):
            return _M_SmartHome.PowerStripPlug._op_resetOutletConsumption.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.PowerStripPlugPrx.ice_checkedCast(proxy, '::SmartHome::PowerStripPlug', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.PowerStripPlugPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PowerStripPlug'
    _M_SmartHome._t_PowerStripPlugPrx = IcePy.defineProxy('::SmartHome::PowerStripPlug', PowerStripPlugPrx)

    _M_SmartHome.PowerStripPlugPrx = PowerStripPlugPrx
    del PowerStripPlugPrx

    _M_SmartHome.PowerStripPlug = Ice.createTempClass()
    class PowerStripPlug(_M_SmartHome.SmartPlug):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::PowerStripPlug', '::SmartHome::SmartPlug')

        def ice_id(self, current=None):
            return '::SmartHome::PowerStripPlug'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PowerStripPlug'

        def getOutletConsumption(self, index, current=None):
            raise NotImplementedError("servant method 'getOutletConsumption' not implemented")

        def resetOutletConsumption(self, index, current=None):
            raise NotImplementedError("servant method 'resetOutletConsumption' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PowerStripPlugDisp)

        __repr__ = __str__

    _M_SmartHome._t_PowerStripPlugDisp = IcePy.defineClass('::SmartHome::PowerStripPlug', PowerStripPlug, (), None, (_M_SmartHome._t_SmartPlugDisp,))
    PowerStripPlug._ice_type = _M_SmartHome._t_PowerStripPlugDisp

    PowerStripPlug._op_getOutletConsumption = IcePy.Operation('getOutletConsumption', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    PowerStripPlug._op_resetOutletConsumption = IcePy.Operation('resetOutletConsumption', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))

    _M_SmartHome.PowerStripPlug = PowerStripPlug
    del PowerStripPlug

_M_SmartHome._t_TimerPlug = IcePy.defineValue('::SmartHome::TimerPlug', Ice.Value, -1, (), False, True, None, ())

if 'TimerPlugPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TimerPlugPrx = Ice.createTempClass()
    class TimerPlugPrx(_M_SmartHome.SmartPlugPrx):

        def setAutoOff(self, seconds, context=None):
            return _M_SmartHome.TimerPlug._op_setAutoOff.invoke(self, ((seconds, ), context))

        def setAutoOffAsync(self, seconds, context=None):
            return _M_SmartHome.TimerPlug._op_setAutoOff.invokeAsync(self, ((seconds, ), context))

        def begin_setAutoOff(self, seconds, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TimerPlug._op_setAutoOff.begin(self, ((seconds, ), _response, _ex, _sent, context))

        def end_setAutoOff(self, _r):
            return _M_SmartHome.TimerPlug._op_setAutoOff.end(self, _r)

        def cancelAutoOff(self, context=None):
            return _M_SmartHome.TimerPlug._op_cancelAutoOff.invoke(self, ((), context))

        def cancelAutoOffAsync(self, context=None):
            return _M_SmartHome.TimerPlug._op_cancelAutoOff.invokeAsync(self, ((), context))

        def begin_cancelAutoOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TimerPlug._op_cancelAutoOff.begin(self, ((), _response, _ex, _sent, context))

        def end_cancelAutoOff(self, _r):
            return _M_SmartHome.TimerPlug._op_cancelAutoOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TimerPlugPrx.ice_checkedCast(proxy, '::SmartHome::TimerPlug', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TimerPlugPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TimerPlug'
    _M_SmartHome._t_TimerPlugPrx = IcePy.defineProxy('::SmartHome::TimerPlug', TimerPlugPrx)

    _M_SmartHome.TimerPlugPrx = TimerPlugPrx
    del TimerPlugPrx

    _M_SmartHome.TimerPlug = Ice.createTempClass()
    class TimerPlug(_M_SmartHome.SmartPlug):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::SmartPlug', '::SmartHome::TimerPlug')

        def ice_id(self, current=None):
            return '::SmartHome::TimerPlug'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TimerPlug'

        def setAutoOff(self, seconds, current=None):
            raise NotImplementedError("servant method 'setAutoOff' not implemented")

        def cancelAutoOff(self, current=None):
            raise NotImplementedError("servant method 'cancelAutoOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TimerPlugDisp)

        __repr__ = __str__

    _M_SmartHome._t_TimerPlugDisp = IcePy.defineClass('::SmartHome::TimerPlug', TimerPlug, (), None, (_M_SmartHome._t_SmartPlugDisp,))
    TimerPlug._ice_type = _M_SmartHome._t_TimerPlugDisp

    TimerPlug._op_setAutoOff = IcePy.Operation('setAutoOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceError, _M_SmartHome._t_InvalidParameter))
    TimerPlug._op_cancelAutoOff = IcePy.Operation('cancelAutoOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.TimerPlug = TimerPlug
    del TimerPlug

_M_SmartHome._t_DeviceManager = IcePy.defineValue('::SmartHome::DeviceManager', Ice.Value, -1, (), False, True, None, ())

if 'DeviceManagerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceManagerPrx = Ice.createTempClass()
    class DeviceManagerPrx(Ice.ObjectPrx):

        def listDevices(self, context=None):
            return _M_SmartHome.DeviceManager._op_listDevices.invoke(self, ((), context))

        def listDevicesAsync(self, context=None):
            return _M_SmartHome.DeviceManager._op_listDevices.invokeAsync(self, ((), context))

        def begin_listDevices(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DeviceManager._op_listDevices.begin(self, ((), _response, _ex, _sent, context))

        def end_listDevices(self, _r):
            return _M_SmartHome.DeviceManager._op_listDevices.end(self, _r)

        def getDevice(self, id, context=None):
            return _M_SmartHome.DeviceManager._op_getDevice.invoke(self, ((id, ), context))

        def getDeviceAsync(self, id, context=None):
            return _M_SmartHome.DeviceManager._op_getDevice.invokeAsync(self, ((id, ), context))

        def begin_getDevice(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DeviceManager._op_getDevice.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_getDevice(self, _r):
            return _M_SmartHome.DeviceManager._op_getDevice.end(self, _r)

        def addDevice(self, id, device, context=None):
            return _M_SmartHome.DeviceManager._op_addDevice.invoke(self, ((id, device), context))

        def addDeviceAsync(self, id, device, context=None):
            return _M_SmartHome.DeviceManager._op_addDevice.invokeAsync(self, ((id, device), context))

        def begin_addDevice(self, id, device, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DeviceManager._op_addDevice.begin(self, ((id, device), _response, _ex, _sent, context))

        def end_addDevice(self, _r):
            return _M_SmartHome.DeviceManager._op_addDevice.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DeviceManagerPrx.ice_checkedCast(proxy, '::SmartHome::DeviceManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DeviceManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceManager'
    _M_SmartHome._t_DeviceManagerPrx = IcePy.defineProxy('::SmartHome::DeviceManager', DeviceManagerPrx)

    _M_SmartHome.DeviceManagerPrx = DeviceManagerPrx
    del DeviceManagerPrx

    _M_SmartHome.DeviceManager = Ice.createTempClass()
    class DeviceManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::DeviceManager')

        def ice_id(self, current=None):
            return '::SmartHome::DeviceManager'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceManager'

        def listDevices(self, current=None):
            raise NotImplementedError("servant method 'listDevices' not implemented")

        def getDevice(self, id, current=None):
            raise NotImplementedError("servant method 'getDevice' not implemented")

        def addDevice(self, id, device, current=None):
            raise NotImplementedError("servant method 'addDevice' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceManagerDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceManagerDisp = IcePy.defineClass('::SmartHome::DeviceManager', DeviceManager, (), None, ())
    DeviceManager._ice_type = _M_SmartHome._t_DeviceManagerDisp

    DeviceManager._op_listDevices = IcePy.Operation('listDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_stringSeq, False, 0), ())
    DeviceManager._op_getDevice = IcePy.Operation('getDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_SmartHome._t_DevicePrx, False, 0), (_M_SmartHome._t_DeviceNotFound,))
    DeviceManager._op_addDevice = IcePy.Operation('addDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_SmartHome._t_DevicePrx, False, 0)), (), None, (_M_SmartHome._t_DeviceError,))

    _M_SmartHome.DeviceManager = DeviceManager
    del DeviceManager

# End of module SmartHome
